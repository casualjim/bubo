// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	api "github.com/casualjim/bubo/api"
	mock "github.com/stretchr/testify/mock"

	tool "github.com/casualjim/bubo/tool"

	types "github.com/casualjim/bubo/types"
)

// Agent is an autogenerated mock type for the Agent type
type Agent struct {
	mock.Mock
}

type Agent_Expecter struct {
	mock *mock.Mock
}

func (_m *Agent) EXPECT() *Agent_Expecter {
	return &Agent_Expecter{mock: &_m.Mock}
}

// Instructions provides a mock function with no fields
func (_m *Agent) Instructions() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Instructions")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Agent_Instructions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Instructions'
type Agent_Instructions_Call struct {
	*mock.Call
}

// Instructions is a helper method to define mock.On call
func (_e *Agent_Expecter) Instructions() *Agent_Instructions_Call {
	return &Agent_Instructions_Call{Call: _e.mock.On("Instructions")}
}

func (_c *Agent_Instructions_Call) Run(run func()) *Agent_Instructions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Agent_Instructions_Call) Return(_a0 string) *Agent_Instructions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Agent_Instructions_Call) RunAndReturn(run func() string) *Agent_Instructions_Call {
	_c.Call.Return(run)
	return _c
}

// Model provides a mock function with no fields
func (_m *Agent) Model() api.Model {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Model")
	}

	var r0 api.Model
	if rf, ok := ret.Get(0).(func() api.Model); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Model)
		}
	}

	return r0
}

// Agent_Model_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Model'
type Agent_Model_Call struct {
	*mock.Call
}

// Model is a helper method to define mock.On call
func (_e *Agent_Expecter) Model() *Agent_Model_Call {
	return &Agent_Model_Call{Call: _e.mock.On("Model")}
}

func (_c *Agent_Model_Call) Run(run func()) *Agent_Model_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Agent_Model_Call) Return(_a0 api.Model) *Agent_Model_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Agent_Model_Call) RunAndReturn(run func() api.Model) *Agent_Model_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *Agent) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Agent_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Agent_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Agent_Expecter) Name() *Agent_Name_Call {
	return &Agent_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Agent_Name_Call) Run(run func()) *Agent_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Agent_Name_Call) Return(_a0 string) *Agent_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Agent_Name_Call) RunAndReturn(run func() string) *Agent_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ParallelToolCalls provides a mock function with no fields
func (_m *Agent) ParallelToolCalls() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParallelToolCalls")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Agent_ParallelToolCalls_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParallelToolCalls'
type Agent_ParallelToolCalls_Call struct {
	*mock.Call
}

// ParallelToolCalls is a helper method to define mock.On call
func (_e *Agent_Expecter) ParallelToolCalls() *Agent_ParallelToolCalls_Call {
	return &Agent_ParallelToolCalls_Call{Call: _e.mock.On("ParallelToolCalls")}
}

func (_c *Agent_ParallelToolCalls_Call) Run(run func()) *Agent_ParallelToolCalls_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Agent_ParallelToolCalls_Call) Return(_a0 bool) *Agent_ParallelToolCalls_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Agent_ParallelToolCalls_Call) RunAndReturn(run func() bool) *Agent_ParallelToolCalls_Call {
	_c.Call.Return(run)
	return _c
}

// RenderInstructions provides a mock function with given fields: _a0
func (_m *Agent) RenderInstructions(_a0 types.ContextVars) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RenderInstructions")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ContextVars) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.ContextVars) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(types.ContextVars) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Agent_RenderInstructions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderInstructions'
type Agent_RenderInstructions_Call struct {
	*mock.Call
}

// RenderInstructions is a helper method to define mock.On call
//   - _a0 types.ContextVars
func (_e *Agent_Expecter) RenderInstructions(_a0 interface{}) *Agent_RenderInstructions_Call {
	return &Agent_RenderInstructions_Call{Call: _e.mock.On("RenderInstructions", _a0)}
}

func (_c *Agent_RenderInstructions_Call) Run(run func(_a0 types.ContextVars)) *Agent_RenderInstructions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ContextVars))
	})
	return _c
}

func (_c *Agent_RenderInstructions_Call) Return(_a0 string, _a1 error) *Agent_RenderInstructions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Agent_RenderInstructions_Call) RunAndReturn(run func(types.ContextVars) (string, error)) *Agent_RenderInstructions_Call {
	_c.Call.Return(run)
	return _c
}

// Tools provides a mock function with no fields
func (_m *Agent) Tools() []tool.Definition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tools")
	}

	var r0 []tool.Definition
	if rf, ok := ret.Get(0).(func() []tool.Definition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tool.Definition)
		}
	}

	return r0
}

// Agent_Tools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tools'
type Agent_Tools_Call struct {
	*mock.Call
}

// Tools is a helper method to define mock.On call
func (_e *Agent_Expecter) Tools() *Agent_Tools_Call {
	return &Agent_Tools_Call{Call: _e.mock.On("Tools")}
}

func (_c *Agent_Tools_Call) Run(run func()) *Agent_Tools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Agent_Tools_Call) Return(_a0 []tool.Definition) *Agent_Tools_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Agent_Tools_Call) RunAndReturn(run func() []tool.Definition) *Agent_Tools_Call {
	_c.Call.Return(run)
	return _c
}

// NewAgent creates a new instance of Agent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgent(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Agent {
	mock := &Agent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
