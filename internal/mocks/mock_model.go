// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	provider "github.com/casualjim/bubo/provider"
	mock "github.com/stretchr/testify/mock"
)

// Model is an autogenerated mock type for the Model type
type Model struct {
	mock.Mock
}

type Model_Expecter struct {
	mock *mock.Mock
}

func (_m *Model) EXPECT() *Model_Expecter {
	return &Model_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with no fields
func (_m *Model) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Model_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Model_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Model_Expecter) Name() *Model_Name_Call {
	return &Model_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Model_Name_Call) Run(run func()) *Model_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Model_Name_Call) Return(_a0 string) *Model_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Model_Name_Call) RunAndReturn(run func() string) *Model_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Provider provides a mock function with no fields
func (_m *Model) Provider() provider.Provider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Provider")
	}

	var r0 provider.Provider
	if rf, ok := ret.Get(0).(func() provider.Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provider.Provider)
		}
	}

	return r0
}

// Model_Provider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Provider'
type Model_Provider_Call struct {
	*mock.Call
}

// Provider is a helper method to define mock.On call
func (_e *Model_Expecter) Provider() *Model_Provider_Call {
	return &Model_Provider_Call{Call: _e.mock.On("Provider")}
}

func (_c *Model_Provider_Call) Run(run func()) *Model_Provider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Model_Provider_Call) Return(_a0 provider.Provider) *Model_Provider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Model_Provider_Call) RunAndReturn(run func() provider.Provider) *Model_Provider_Call {
	_c.Call.Return(run)
	return _c
}

// NewModel creates a new instance of Model. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModel(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Model {
	mock := &Model{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
