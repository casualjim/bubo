// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	context "context"

	broker "github.com/casualjim/bubo/internal/broker"

	events "github.com/casualjim/bubo/events"

	mock "github.com/stretchr/testify/mock"
)

// Topic is an autogenerated mock type for the Topic type
type Topic struct {
	mock.Mock
}

type Topic_Expecter struct {
	mock *mock.Mock
}

func (_m *Topic) EXPECT() *Topic_Expecter {
	return &Topic_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *Topic) Publish(_a0 context.Context, _a1 events.Event) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, events.Event) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Topic_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type Topic_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 events.Event
func (_e *Topic_Expecter) Publish(_a0 interface{}, _a1 interface{}) *Topic_Publish_Call {
	return &Topic_Publish_Call{Call: _e.mock.On("Publish", _a0, _a1)}
}

func (_c *Topic_Publish_Call) Run(run func(_a0 context.Context, _a1 events.Event)) *Topic_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(events.Event))
	})
	return _c
}

func (_c *Topic_Publish_Call) Return(_a0 error) *Topic_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Topic_Publish_Call) RunAndReturn(run func(context.Context, events.Event) error) *Topic_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *Topic) Subscribe(_a0 context.Context, _a1 events.Hook) (broker.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 broker.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, events.Hook) (broker.Subscription, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, events.Hook) broker.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(broker.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, events.Hook) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Topic_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Topic_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 events.Hook
func (_e *Topic_Expecter) Subscribe(_a0 interface{}, _a1 interface{}) *Topic_Subscribe_Call {
	return &Topic_Subscribe_Call{Call: _e.mock.On("Subscribe", _a0, _a1)}
}

func (_c *Topic_Subscribe_Call) Run(run func(_a0 context.Context, _a1 events.Hook)) *Topic_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(events.Hook))
	})
	return _c
}

func (_c *Topic_Subscribe_Call) Return(_a0 broker.Subscription, _a1 error) *Topic_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Topic_Subscribe_Call) RunAndReturn(run func(context.Context, events.Hook) (broker.Subscription, error)) *Topic_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewTopic creates a new instance of Topic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTopic(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Topic {
	mock := &Topic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
